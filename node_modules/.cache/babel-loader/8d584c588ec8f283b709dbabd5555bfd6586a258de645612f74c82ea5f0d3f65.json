{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\qlttsv\\\\src\\\\StudentManagementForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport StudentList from './StudentList';\nimport InterviewSelection from './InterviewSelection';\nimport ExportToExcel from './ExportToExcel';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StudentManagementForm({\n  students\n}) {\n  _s();\n  const [selectedStudents, setSelectedStudents] = useState([]);\n  const handleStudentSelection = studentId => {\n    // Check if the student is already in the list\n    const isStudentSelected = selectedStudents.includes(studentId);\n    if (isStudentSelected) {\n      // Remove the student from the selected list\n      setSelectedStudents(prevSelected => prevSelected.filter(id => id !== studentId));\n    } else {\n      // Add the student to the selected list\n      setSelectedStudents(prevSelected => [...prevSelected, studentId]);\n    }\n  };\n  const handleExportExcel = () => {\n    // Create a workbook\n    const workbook = XLSX.utils.book_new();\n\n    // Create a worksheet\n    const worksheet = XLSX.utils.json_to_sheet(students.filter(student => selectedStudents.includes(student.id)));\n\n    // Add the worksheet to the workbook\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'SelectedStudents');\n\n    // Save the workbook as an Excel file\n    XLSX.writeFile(workbook, 'selected_students.xlsx');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Student Management Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StudentList, {\n      students: students,\n      onSelect: handleStudentSelection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InterviewSelection, {\n      selectedStudents: selectedStudents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExportToExcel, {\n      onExport: handleExportExcel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(StudentManagementForm, \"auKVHB9s8OezcfalAGaJZWue4ds=\");\n_c = StudentManagementForm;\nexport default StudentManagementForm;\nvar _c;\n$RefreshReg$(_c, \"StudentManagementForm\");","map":{"version":3,"names":["React","useState","StudentList","InterviewSelection","ExportToExcel","XLSX","jsxDEV","_jsxDEV","StudentManagementForm","students","_s","selectedStudents","setSelectedStudents","handleStudentSelection","studentId","isStudentSelected","includes","prevSelected","filter","id","handleExportExcel","workbook","utils","book_new","worksheet","json_to_sheet","student","book_append_sheet","writeFile","children","fileName","_jsxFileName","lineNumber","columnNumber","onSelect","onExport","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/qlttsv/src/StudentManagementForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport StudentList from './StudentList';\r\nimport InterviewSelection from './InterviewSelection'; \r\nimport ExportToExcel from './ExportToExcel'; \r\nimport * as XLSX from 'xlsx';\r\n\r\nfunction StudentManagementForm({ students }) {\r\n  const [selectedStudents, setSelectedStudents] = useState([]);\r\n\r\n  const handleStudentSelection = (studentId) => {\r\n    // Check if the student is already in the list\r\n    const isStudentSelected = selectedStudents.includes(studentId);\r\n\r\n    if (isStudentSelected) {\r\n      // Remove the student from the selected list\r\n      setSelectedStudents((prevSelected) =>\r\n        prevSelected.filter((id) => id !== studentId)\r\n      );\r\n    } else {\r\n      // Add the student to the selected list\r\n      setSelectedStudents((prevSelected) => [...prevSelected, studentId]);\r\n    }\r\n  };\r\n\r\n  const handleExportExcel = () => {\r\n    // Create a workbook\r\n    const workbook = XLSX.utils.book_new();\r\n\r\n    // Create a worksheet\r\n    const worksheet = XLSX.utils.json_to_sheet(\r\n      students.filter((student) => selectedStudents.includes(student.id))\r\n    );\r\n\r\n    // Add the worksheet to the workbook\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'SelectedStudents');\r\n\r\n    // Save the workbook as an Excel file\r\n    XLSX.writeFile(workbook, 'selected_students.xlsx');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Student Management Form</h2>\r\n      <StudentList students={students} onSelect={handleStudentSelection} />\r\n      <InterviewSelection selectedStudents={selectedStudents} />\r\n      <ExportToExcel onExport={handleExportExcel} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StudentManagementForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAO,KAAKC,IAAI,MAAM,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,SAASC,qBAAqBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC3C,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE5D,MAAMY,sBAAsB,GAAIC,SAAS,IAAK;IAC5C;IACA,MAAMC,iBAAiB,GAAGJ,gBAAgB,CAACK,QAAQ,CAACF,SAAS,CAAC;IAE9D,IAAIC,iBAAiB,EAAE;MACrB;MACAH,mBAAmB,CAAEK,YAAY,IAC/BA,YAAY,CAACC,MAAM,CAAEC,EAAE,IAAKA,EAAE,KAAKL,SAAS,CAC9C,CAAC;IACH,CAAC,MAAM;MACL;MACAF,mBAAmB,CAAEK,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEH,SAAS,CAAC,CAAC;IACrE;EACF,CAAC;EAED,MAAMM,iBAAiB,GAAGA,CAAA,KAAM;IAC9B;IACA,MAAMC,QAAQ,GAAGhB,IAAI,CAACiB,KAAK,CAACC,QAAQ,CAAC,CAAC;;IAEtC;IACA,MAAMC,SAAS,GAAGnB,IAAI,CAACiB,KAAK,CAACG,aAAa,CACxChB,QAAQ,CAACS,MAAM,CAAEQ,OAAO,IAAKf,gBAAgB,CAACK,QAAQ,CAACU,OAAO,CAACP,EAAE,CAAC,CACpE,CAAC;;IAED;IACAd,IAAI,CAACiB,KAAK,CAACK,iBAAiB,CAACN,QAAQ,EAAEG,SAAS,EAAE,kBAAkB,CAAC;;IAErE;IACAnB,IAAI,CAACuB,SAAS,CAACP,QAAQ,EAAE,wBAAwB,CAAC;EACpD,CAAC;EAED,oBACEd,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChC1B,OAAA,CAACL,WAAW;MAACO,QAAQ,EAAEA,QAAS;MAACyB,QAAQ,EAAErB;IAAuB;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrE1B,OAAA,CAACJ,kBAAkB;MAACQ,gBAAgB,EAAEA;IAAiB;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1D1B,OAAA,CAACH,aAAa;MAAC+B,QAAQ,EAAEf;IAAkB;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV;AAACvB,EAAA,CA1CQF,qBAAqB;AAAA4B,EAAA,GAArB5B,qBAAqB;AA4C9B,eAAeA,qBAAqB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}