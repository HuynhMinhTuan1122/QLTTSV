{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\qlttsv\\\\src\\\\StudentManagementForm.js\",\n  _s = $RefreshSig$();\n// StudentManagementForm.js\nimport React, { useState, useEffect } from 'react';\nimport * as XLSX from 'xlsx';\nimport './StudentManagementForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StudentManagementForm = () => {\n  _s();\n  const [students, setStudents] = useState([]);\n  const [selectedStudents, setSelectedStudents] = useState([]);\n  const [interviewList, setInterviewList] = useState([]);\n\n  // Fetch students data from API or other data source\n  useEffect(() => {\n    // Replace the following URL with your API endpoint or data source\n    fetch('https://example.com/api/students').then(response => response.json()).then(data => setStudents(data)).catch(error => console.error('Error fetching students:', error));\n  }, []);\n  const handleSelectStudent = studentId => {\n    setSelectedStudents(prevSelected => prevSelected.includes(studentId) ? prevSelected.filter(id => id !== studentId) : [...prevSelected, studentId]);\n  };\n  const handleExportExcel = () => {\n    if (selectedStudents.length > 0 && students.length > 0) {\n      const selectedStudentsData = students.filter(student => selectedStudents.includes(student.id));\n      if (selectedStudentsData.length > 0) {\n        const ws = XLSX.utils.json_to_sheet(selectedStudentsData);\n        const wb = XLSX.utils.book_new();\n        XLSX.utils.book_append_sheet(wb, ws, 'SelectedStudents');\n        const excelFileName = 'selected_students.xlsx';\n        XLSX.writeFile(wb, excelFileName);\n      } else {\n        console.error('Không có dữ liệu để xuất Excel.');\n      }\n    } else {\n      console.error('Dữ liệu không đủ để xuất Excel.');\n    }\n  };\n  const handleAddToInterviewList = () => {\n    setInterviewList(prevList => [...prevList, ...selectedStudents]);\n    // You can perform other actions here, e.g., update the backend with the interview list\n    // and clear the selectedStudents array.\n    setSelectedStudents([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"student-management-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Qu\\u1EA3n L\\xFD Sinh Vi\\xEAn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"student-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Danh S\\xE1ch Sinh Vi\\xEAn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: students.map(student => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleSelectStudent(student.id),\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedStudents.includes(student.id),\n            onChange: () => {}\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: student.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this), \" - \\u0110i\\u1EC3m: \", student.grade]\n        }, student.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleExportExcel,\n        children: \"Xu\\u1EA5t Excel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"interview-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Danh S\\xE1ch Ph\\u1ECFng V\\u1EA5n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: interviewList.map(studentId => {\n          var _students$find;\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: (_students$find = students.find(student => student.id === studentId)) === null || _students$find === void 0 ? void 0 : _students$find.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this)\n          }, studentId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddToInterviewList,\n        children: \"Th\\xEAm v\\xE0o danh s\\xE1ch ph\\u1ECFng v\\u1EA5n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(StudentManagementForm, \"jux2mG2sVpY27sU4a1FbASK5PCk=\");\n_c = StudentManagementForm;\nexport default StudentManagementForm;\nvar _c;\n$RefreshReg$(_c, \"StudentManagementForm\");","map":{"version":3,"names":["React","useState","useEffect","XLSX","jsxDEV","_jsxDEV","StudentManagementForm","_s","students","setStudents","selectedStudents","setSelectedStudents","interviewList","setInterviewList","fetch","then","response","json","data","catch","error","console","handleSelectStudent","studentId","prevSelected","includes","filter","id","handleExportExcel","length","selectedStudentsData","student","ws","utils","json_to_sheet","wb","book_new","book_append_sheet","excelFileName","writeFile","handleAddToInterviewList","prevList","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","type","checked","onChange","name","grade","_students$find","find","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/qlttsv/src/StudentManagementForm.js"],"sourcesContent":["// StudentManagementForm.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport * as XLSX from 'xlsx';\r\nimport './StudentManagementForm.css';\r\n\r\nconst StudentManagementForm = () => {\r\n  const [students, setStudents] = useState([]);\r\n  const [selectedStudents, setSelectedStudents] = useState([]);\r\n  const [interviewList, setInterviewList] = useState([]);\r\n\r\n  // Fetch students data from API or other data source\r\n  useEffect(() => {\r\n    // Replace the following URL with your API endpoint or data source\r\n    fetch('https://example.com/api/students')\r\n      .then((response) => response.json())\r\n      .then((data) => setStudents(data))\r\n      .catch((error) => console.error('Error fetching students:', error));\r\n  }, []);\r\n\r\n  const handleSelectStudent = (studentId) => {\r\n    setSelectedStudents((prevSelected) =>\r\n      prevSelected.includes(studentId)\r\n        ? prevSelected.filter((id) => id !== studentId)\r\n        : [...prevSelected, studentId]\r\n    );\r\n  };\r\n\r\n  const handleExportExcel = () => {\r\n    if (selectedStudents.length > 0 && students.length > 0) {\r\n      const selectedStudentsData = students.filter((student) =>\r\n        selectedStudents.includes(student.id)\r\n      );\r\n\r\n      if (selectedStudentsData.length > 0) {\r\n        const ws = XLSX.utils.json_to_sheet(selectedStudentsData);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, 'SelectedStudents');\r\n        const excelFileName = 'selected_students.xlsx';\r\n        XLSX.writeFile(wb, excelFileName);\r\n      } else {\r\n        console.error('Không có dữ liệu để xuất Excel.');\r\n      }\r\n    } else {\r\n      console.error('Dữ liệu không đủ để xuất Excel.');\r\n    }\r\n  };\r\n\r\n  const handleAddToInterviewList = () => {\r\n    setInterviewList((prevList) => [...prevList, ...selectedStudents]);\r\n    // You can perform other actions here, e.g., update the backend with the interview list\r\n    // and clear the selectedStudents array.\r\n    setSelectedStudents([]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"student-management-form\">\r\n      <h2>Quản Lý Sinh Viên</h2>\r\n      <div className=\"student-list\">\r\n        <h3>Danh Sách Sinh Viên</h3>\r\n        <ul>\r\n          {students.map((student) => (\r\n            <li key={student.id} onClick={() => handleSelectStudent(student.id)}>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={selectedStudents.includes(student.id)}\r\n                onChange={() => {}}\r\n              />\r\n              <span>{student.name}</span> - Điểm: {student.grade}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <button onClick={handleExportExcel}>Xuất Excel</button>\r\n      </div>\r\n\r\n      <div className=\"interview-list\">\r\n        <h3>Danh Sách Phỏng Vấn</h3>\r\n        <ul>\r\n          {interviewList.map((studentId) => (\r\n            <li key={studentId}>\r\n              <span>{students.find((student) => student.id === studentId)?.name}</span>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <button onClick={handleAddToInterviewList}>Thêm vào danh sách phỏng vấn</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StudentManagementForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}